Uma heap é uma estrutura de arvore binaria completa representada como um array.
No Heap Sort, começamos transformando o array em um Max Heap (o maior elemento no topo).
O array será tratado como uma arvore:

Pai: parent(i) = [(i - 1)/2]
Filho esquerdo: left(i) = 2i + 1
Filho direito: right(i) = 2i + 2

Arvore correspondente de um exemplo de arvore binaria para ordenar com heap sort: [4,10,3,5,1]
       4
     /   \
   10     3     2i + 1 = 3: 5 (2i = segundo indice, 10), terceiro indice = esquerda, 5
  /  \          2i + 2 = 4: 1 (segundo indice, 10), quarto indice = direita, 1
 5    1

ajustando o nó i = 0(4, com os filhos 10 e 3):

Filho esquerdo: 10
Filho direito: 3
10 > 4, troque 4 com 10: [10, 4, 3, 5, 1]

      10
     /   \
    4     3
   / \
  5   1
Filho esquerdo (indice 3): 5 de 4 (indice 1)
Filho direito (indice 4): 1 de 4 (indice 1)
O maior filho é 5, troque 4 com 5
Após a troca, o array fica: [10, 5, 3, 4, 1]

      10
     /  \
    5    3
   / \
  4   1
Troque a raiz (10) com o último elemento (1).
O array fica: [1, 5, 3, 4, 10] (10 está ordenado no final).

Troque 10 por 1

       1
      / \
     5   3
    /
   4
Reorganize (ajustar raiz 1):

Filho esquerdo: 5 (maior).
Troque 1 com 5 → [5, 1, 3, 4, 10].
Ajuste o nó 1:

Filho esquerdo: 4.
Troque 1 com 4 → [5, 4, 3, 1, 10].
       5
      / \
     4   3
    /
   1
Troque a raiz (5) com o último elemento do heap (1).
Array: [1, 4, 3, 5, 10]
Árvore:
       1
     /  \
    4    3

Troque 1 com 4 → [4, 1, 3, 5, 10].

       4
     /   \
    1     3

Troque a raiz (4) com o último elemento (3).
Array: [3, 1, 4, 5, 10]
Árvore:

       3
     /
    1

Troque a raiz (3) com o último elemento (1).
Array: [1, 3, 4, 5, 10]

       1
Resultado Final
Array ordenado: [1, 3, 4, 5, 10]
