Passos para calcular a complexidade:

1- Levar em consideração apenas as repetições (for) do código

2- Verificar a complexidade das funções/métodos próprios da linguagem
(se utilizado)

3- Ignorar as constantes(O(1), por exemplo) e utilizar o termo de maior grau

Exemplos:

bool exemplo1(vector<int> v, int x){
    int tamanho = v.size(); // O(1)
    for(int i=0; i<tamanho; i++){ // O(N)
        if(v[i] == x) return true; // O(1)
    }
    return false; // O(1)
}

"Complexity" de um vetor é uma constante, portanto O(1)
for (repetição) de tamanho, portanto O(N)
if (comparação), portanto também constante O(1)

Ao Ignorar as constantes do passo 3, teremos:
ou seja:    O(N), ou seja, linear

bool exemplo2(vector<int> v){
    int tamanho = v.size(); // O(1)
    for(int i=0; i<tamanho; i++){ // O(N)
        for(int j=0; j<tamanho; j++){ // O(N)
            if(i != j && v[i] == v[j]) // O(1)
                return true;
        }
    }
    return false;
}

vetor = constante -> O(1)
repetição for de i = linear -> O(N)
repetição for de j = linear -> O(N)
if = comparação -> O(1)

excluindo as constantes, ficará: O(N)*O(N)
ou seja:   O(N²)

O(N)*O(N) + O(N) + O(N)

O(N²) + 2*O(N)

eliminar constantes

O(N²) + O(N)

O(N²) 

Será multiplicação quando uma repetição estar dentro da outra,
por exemplo:

int tamanho = v.size(); // O(1)
    for(int i=0; i<tamanho; i++){ // O(N)
        for(int j=0; j<tamanho; j++){ // O(N)
            for(int k=0; k<tamanho; k++){ //O(N)
                return 1;
            }
        }
    }

na função acima, ficará:
O(N)*O(N)*O(N) = O(N³)

Agora, quando as repetições estarem em subprogramas diferentes, ou seja,
independentes umas das outras, ficará:

int a = 0;
for(int i = 0; i<tamanho; i++){ // O(N)
    return a;
}

int b = 0;
for(int i=0; i<tamanho; i++){ // O(N)
    return b;
}

int c = 0;
for(int i=0; i<tamanho; i++){ //O(N)
    return c;
}

na função acima, ficará:

O(N) + O(N) + O(N) = 3*O(N)
Ignorando as constantes, ficará simplesmente:
O(N)

bool exemplo3(vector<int> v, vector<int> w){
    int tamanho = v.size();
    int tamanho2 = w.size();
    for(int i=0; i<tamanho; i++){ //O(N)
        for(int j=0; j<tamanho2; j++){ // O(M)
            if(v[i] == v[j])
                return true;
        }
    }
    return false;
}

Por haver dois vetores de dois tamanhos diferentes
(tamanho e tamanho2), não pode ser ambos O(N), 
ficando O(M) como tamanho2, ou seja:

O(N)*O(M)

bool exemplo4(vector<int> idades){
    sort(idades.begin(), idades.end()); // O(NLogN)
    return idades[0] == idades[1];
}

O(NLogN)

sort = NLogN
count = LogN
